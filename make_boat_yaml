#!/usr/bin/env python3
from typing import OrderedDict
import json
import base64
import sys
from pathlib import Path
from helpers import map_boat, topLevelFields, dump

def get_boat(data, pickers):
  boat = OrderedDict()
  for field in topLevelFields:
    if field in data and data[field] is not None:
      f = data[field]
      if field in ['builder','designer','design_class']:
        if type(f) is dict:
          id = f['id']
        else:
          id = f
        values = [p for p in pickers[field] if p['id'] == id]
        if (len(values) > 0):
          boat[field] = values[0]
      else:
        boat[field] = f
      del data[field]
  return OrderedDict(**boat, **OrderedDict(data)) # any fields not in topLevelFields

if __name__ == '__main__':
  with open("pickers.json", "r") as stream:
    pickers = json.load(stream)
  if len(sys.argv) == 2:
    b64 = open(sys.argv[1], "r").read()
  else:
    b64 = sys.stdin.buffer.read()
  decoded = base64.b64decode(b64)
  data = json.loads(decoded)
  boat = get_boat(data, pickers)
  outdir = f"boat/{boat['oga_no']}"
  Path(outdir).mkdir(parents=True, exist_ok=True)
  with open(f'{outdir}/boat.yml', 'w') as outfile:
    dump(map_boat(boat, pickers), outfile)

