#!/usr/bin/env python3
from array import array
from typing import OrderedDict
import yaml
import json
import base64
import sys
from pathlib import Path

omitFields = ['price','update_id']

topLevelFields = [
  'name',
  'oga_no',
  'generic_type',
  'rig_type',
  'mainsail_type',
  'short_description',
  'full_description',
  'year',
  'year_is_approximate',
  'designer',
  'design_class',
  'builder',
  'place_built',
  'construction_material',
  'spar_material',
  'construction_method',
  'construction_details',
  'engine_installations',
  'selling_status',
  'for_sales',
  'dimensions',
  'home_country',
  'home_port',
  'hull_form',
  'reference',
  'sail_number',
  'ssr',
  'uk_part1',
  'callsign',
  'ownerships',
  'updated_at',
  'website',
  'id',
  'nsbr',
  'fishing_number',
  'mssi',
  'image_key',
  'thumb',
  'draft',
  'handicap_data',
]

def simplify(field, new_field, boat):
  long_field = f"{field}By{field[0].capitalize()}{field[1:]}"
  if long_field in boat:
    print(boat[long_field])
    if field in boat:
      boat[field] = { 'name': boat[long_field]['name'], 'id': boat[field] }
    elif new_field in boat:
      boat[new_field] = { 'name': boat[long_field]['name'], 'id': boat[new_field] }
    del boat[long_field]

def ownerSortOrder(o):
  if 'start' in o:
    try:
      return int(o['start'])
    except:
      pass
  return 1800

def owner(o):
  fields = ['name', 'member', 'id', 'start', 'end', 'share', 'current', 'note', 'text']
  r = {}
  for field in fields:
    if field in o:
      r[field] = o[field]
  return r

def ownerships(os):
  if type(os) is list:
    owners = os
  else:
    if 'owners' in os and os['owners'] is not None:
      owners = os['owners']
    else:
      owners = []
    if 'current' in os and os['current'] is not None:
      current = os['current']
      for o in current:
        ol = []
        found = False
        if 'id' in o:
          for r in owners:
            if 'id' in r and r['id'] == o['id']:
              r['current'] = True
              found = True
            ol.append(r)
          if not found:
            o['current'] = True
            if 'start' not in o:
              o['start']='?'
            ol.append(o)
        else:
          for r in owners:
            if 'member' in r and r['member'] == o['member']:
              r['current'] = True
              found = True
            ol.append(r)
          if not found:
            o['current'] = True
            if 'start' not in o:
              o['start']='?'
            ol.append(o)
  return sorted([owner(o) for o in os], key=ownerSortOrder)


handicapFields = [
  'thcf',
  'beam',
  'draft',
  'fore_triangle_height',
  'fore_triangle_base',
  'length_over_all',
  'propellor',
  'sailarea',
  'main',
  'topsail',  
]

def map_handicap_data(b):
  boat = {**b}
  if 'handicap_data' in boat:
    h = boat['handicap_data']
  else:
    h = {}
  for f in ['beam','draft','length_on_deck']:
    if f in boat:
      h[f] = boat[f]
      del boat[f]
  r = {}
  for f in handicapFields:
    r[f] = h[f]
    del h[f]
  boat['handicap_data'] = {**r, **h}
  return boat

def map_boat(item):
  boat = {k: v for k, v in item.items() if v is not None}
  if 'ownerships' in boat:
    boat['ownerships'] = ownerships(boat['ownerships'])
  boat.pop('genericTypeByGenericType', None)
  boat.pop('rigTypeByRigType', None)
  if 'constructionMaterialByConstructionMaterial' in boat:
    boat['construction_material'] = boat['constructionMaterialByConstructionMaterial']['name']
    del boat['constructionMaterialByConstructionMaterial']
  if 'constructionMethodByConstructionMethod' in boat:
    boat['construction_method'] = boat['constructionMethodByConstructionMethod']['name']
    del boat['constructionMethodByConstructionMethod']
  return map_handicap_data(boat)

def get_boat(data):
  boat = OrderedDict()
  for field in topLevelFields:
    if field in data and data[field] is not None:
      f = data[field]
      if field in ['builder','designer','design_class']:
        boat[field] = [p for p in pickers[field] if p['id'] == f][0]
      else:
        boat[field] = f
      del data[field]
  return OrderedDict(**boat, **OrderedDict(data)) # any fields not in topLevelFields

if __name__ == '__main__':
  global pickers
  with open("pickers.json", "r") as stream:
    pickers = json.load(stream)
  if len(sys.argv) == 2:
    b64 = open(sys.argv[1], "r").read()
  else:
    b64 = sys.stdin.buffer.read()
  decoded = base64.b64decode(b64)
  data = json.loads(decoded)
  boat = get_boat(data)
  outdir = f"boat/{boat['oga_no']}"
  Path(outdir).mkdir(parents=True, exist_ok=True)
  with open(f'{outdir}/boat.yml', 'w') as outfile:
    yaml.dump(map_boat(boat), outfile, default_flow_style=False, sort_keys=False)

