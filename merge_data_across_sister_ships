#!/usr/bin/env python3
import ruamel.yaml

wanted = [
'generic_type', 'rig_type', 'mainsail_type', 'designer', 'design_class', 'builder',
'construction_material', 'hull_form', 'construction_method',
'spar_material', 
]

yaml = ruamel.yaml.YAML(typ='safe')
yo = ruamel.yaml.YAML()
yo.default_flow_style = False

def merge(b, x):
  for k in wanted:
    if k in b:
      pass
    elif k not in x:
      pass
    elif x[k] is dict:
      pass
    elif x[k] is list:
      pass
    else:
      b[k] = x[k]
  if 'handicap_data' in x:
    hcd = x['handicap_data']
    bhcd = b.get('handicap_data', {})
    for k in hcd.keys():
      if k not in bhcd:
        bhcd[k] = hcd[k]
    b['handicap_data'] = bhcd

def merged(oga_nos):
  aggregate = { 'handicap_data': {} }
  for oga_no in oga_nos:
    with open(f'boat/{oga_no}/boat.yml') as stream:
      boat = yaml.load(stream)
      merge(aggregate, boat)
  return aggregate

def augment(oga_no, data):
  fn = f'boat/{oga_no}/boat.yml'
  with open(fn) as stream:
    boat = yaml.load(stream)
    merge(boat, data)
  with open(fn, 'w') as f:
    yo.dump(boat, f)

def update_all():
  fn = 'picklists/design_class.yaml'
  with open(fn) as stream:
    dcs = yaml.load(stream)
  for dc in dcs:
    examples = dc.get('examples', [])
    if len(examples) > 0:
      aggregate = merged(examples)
      archetype = examples[0]
      augment(archetype, aggregate)

if __name__ == '__main__':
  update_all()

      

